# Preview settings

# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.config/lf/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.
set icons
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

# General settings

set shellopts '-eu'
set ifs "\n"
set scrolloff 10

# Colemak mappings

map u up
map e down
map i right
map n updir

map U push 10u
map E push 10e

map gs calcdirsize

map k search-next
map K searck-prev

map x unselect

map . set hidden!

set hidden

# my commands
cmd right &{{
	if [ -d $f ]
	then
	lf -remote "send $id open"
	fi
}}

cmd trash ${{
    # clear; tput cup $(($(tput lines)/3)); tput bold
    set -o noglob
	printf "%s\n\n$fx"
	printf "\n\tmove to Trash?[y/N] "
	read -n1 ans
	[ $ans = "y" ] && mv $fx ~/.Trash
}}

cmd rm ${{
    # clear; tput cup $(($(tput lines)/3)); tput bold
    set -o noglob
	printf "%s\n\n$fx"
	printf "\n\tPermanently remove files?[y/N] "
	read -n1 ans
	[ $ans = "y" ] && rm -rf $fx
}}

cmd openfile ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd zip ${{
	printf "%s\n\n$fx"
	printf "\n\tzip name: "
	read ans
    mkdir $ans
    cp -r $fx $ans
    zip -r $ans.zip $ans 1>/dev/null
    rm -rf $ans 
}}

cmd extract &{{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f 1>/dev/null;;
        *.tar.gz|*.tgz) tar xzvf $f 1>/dev/null;;
        *.tar.xz|*.txz) tar xJvf $f 1>/dev/null;;
        *.zip) unzip $f 1>/dev/null;; 
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd mkdir ${{
    printf "\nDirectory Name: "
	read ans
	mkdir $ans
}}

cmd chmod ${{
	printf "%s\n\n$fx"
	printf "\n\tchmod "
	read ans
	chmod $ans $fx
}}

cmd share ${{
	printf "%s\n$fx"
	printf "\n\tShare these files?[y/N] "
	read -n1 ans
	[ $ans = "y" ] && cp $fx ~/Dropbox/temp/ && lf -remote "send $id echomsg file shared"
}}

cmd quicklook &{{
	qlmanage -p $f &> /dev/null 
}}

# command mappings
map D trash
map R rm
map gd mkdir
map <enter> openfile
map zz zip
map X extract
map Z shell
map M push :chmod<enter><c-r>
map S share
map Q quicklook

# better renaming
map A rename
map I push A<c-a>
map a push A<a-b><a-b><a-f> # before extension

map V push :!nvim<space>
